import redis
import datetime
import pickle
import pandas as pd
from etl.warehouse.models import Date, Hour, User


def gen_date(insert=False):
    start = datetime.datetime(2017, 11, 1)
    end = datetime.datetime(2020, 1, 1)

    dates = {}

    dt = start
    key = 1
    while dt <= end:
        if insert:
            Date.create(year=dt.year, month=dt.month, day=dt.day, weekday=dt.isoweekday())

        dates[dt.strftime("%Y_%m_%d")] = key

        key += 1
        dt += datetime.timedelta(days=1)

    return dates


def gen_hour():
    for i in range(0, 24):
        Hour.create(hour=i)


def store_user():
    client = redis.StrictRedis(decode_responses=True)

    for key in client.scan_iter(match='u:*'):
        user_id, level = pickle.loads(client.get(key))

        User.create(user_key=user_id, user_id=user_id, name=key[2:], level=level)


def store_gift(path):
    client = redis.StrictRedis(decode_responses=True)

    prices = {1026: 60, 1027: 10, 1028: 20, 342: 10000, 1033: 20, 1034: 20, 1035: 20, 1037: 600, 1039: 600, 1040: 600,
              1041: 600, 1044: 10, 1045: 600, 1047: 600, 1048: 600, 1049: 600, 1051: 100, 1052: 600, 1054: 600,
              1061: 600, 1062: 600, 1063: 600, 1064: 10, 1065: 20, 1066: 20, 1067: 10, 1068: 100, 1070: 600, 1077: 50,
              1078: 600, 1079: 1, 1080: 10, 57: 10, 1082: 600, 1083: 10000, 1085: 50000, 1086: 200000, 1090: 600,
              1091: 100, 1101: 20, 1102: 600, 1109: 20, 1110: 20, 1111: 10, 1113: 10, 1115: 50000, 1117: 10, 1118: 20,
              1119: 600, 1124: 600, 1125: 600, 1127: 20, 1133: 10, 1134: 600, 1135: 20, 1136: 30, 1137: 100, 1139: 100,
              1141: 20, 1143: 20, 1144: 200000, 1145: 600, 1146: 50, 1147: 50, 1150: 100, 127: 600, 1153: 1,
              1156: 10000, 1158: 20, 1159: 10, 1160: 20, 1161: 660, 1165: 100, 1167: 10, 1168: 80000, 1169: 200000,
              1170: 600, 1171: 20, 1172: 20, 1173: 50000, 1174: 10, 1175: 600, 196: 50000, 1178: 10, 1179: 20, 1180: 20,
              1181: 600, 1182: 600, 1183: 600, 1184: 100, 1185: 100, 1186: 100, 1187: 100, 1188: 1160, 1189: 600,
              1190: 600, 1196: 600, 1198: 1, 1199: 50000, 1201: 10, 1202: 20, 1203: 600, 1204: 10000, 1207: 200000,
              184: 131400, 1209: 600, 191: 1, 192: 10, 193: 20, 194: 600, 195: 10000, 1220: 600, 1221: 200, 1222: 100,
              1223: 600, 1226: 600, 1233: 600, 1241: 10, 1242: 50000, 1243: 10000, 220: 600, 1245: 600, 1249: 50000,
              1255: 1, 1256: 10, 1257: 20, 1259: 600, 1260: 10000, 1261: 50000, 1262: 200000, 1263: 60, 1264: 6600,
              1265: 66600, 1266: 600, 1269: 6600, 1271: 6600, 1276: 10, 1277: 10, 1278: 10, 1280: 10, 1282: 600,
              1283: 100, 1284: 1200, 1285: 50000, 268: 80, 1295: 1, 1296: 10, 1299: 10000, 1300: 50000, 1305: 2900,
              1306: 5900, 1307: 200000, 1309: 600, 1310: 10, 1311: 10, 1312: 100, 1313: 100, 1315: 100, 1316: 10,
              1317: 10, 294: 10, 1319: 10, 1320: 10, 1321: 20, 1323: 20, 1324: 600, 1325: 50000, 221: 600, 1333: 1,
              1334: 10, 1335: 20, 1336: 600, 1337: 10000, 1338: 50000, 1339: 200000, 316: 700, 1349: 900, 1354: 10,
              343: 50000, 1356: 600, 1357: 10000, 1358: 600, 1359: 10, 1360: 10, 1361: 100, 338: 1, 339: 10, 340: 20,
              1366: 10, 1081: 20, 1368: 600, 1372: 600, 1376: 50000, 59: 50000, 363: 600, 364: 600, 365: 600, 380: 10,
              391: 8100, 392: 10, 393: 10, 394: 20, 396: 16600, 405: 20, 406: 600, 407: 10000, 408: 50000, 415: 600,
              416: 600, 417: 600, 428: 10, 429: 10, 432: 10, 441: 600, 442: 600, 443: 600, 445: 600, 447: 600, 453: 10,
              454: 20, 456: 20, 457: 600, 458: 600, 460: 4010, 461: 1, 462: 10, 463: 20, 465: 10000, 466: 50000,
              467: 600, 470: 600, 471: 600, 472: 600, 473: 600, 474: 600, 475: 80, 478: 20, 479: 20, 480: 10, 481: 10,
              485: 100, 486: 100, 487: 100, 488: 5200, 492: 10, 493: 20, 495: 100, 497: 200, 498: 600, 499: 600,
              153: 600, 523: 10, 528: 20, 529: 20, 530: 20, 531: 10, 532: 20, 536: 100, 550: 1, 551: 20, 552: 10,
              553: 600, 554: 50000, 555: 10000, 557: 20, 558: 10, 560: 20, 574: 5000, 602: 600, 54: 10000, 605: 100,
              606: 600, 627: 80, 628: 80, 629: 600, 630: 600, 631: 10, 632: 600, 633: 100, 641: 100, 658: 1, 659: 10,
              668: 600, 282: 600, 680: 10, 681: 20, 682: 10000, 686: 100000, 687: 1200, 688: 1200, 702: 20, 703: 20,
              704: 16600, 705: 1200, 175: 600, 709: 1200, 289: 1, 160: 600, 735: 20, 739: 16600, 740: 600, 1318: 10,
              295: 70, 750: 600, 754: 10, 755: 20, 756: 600, 760: 100, 761: 600, 762: 100, 1151: 600, 764: 600, 765: 10,
              768: 20, 769: 100, 770: 100, 781: 600, 784: 20, 785: 20, 790: 10000, 793: 5000, 795: 600, 797: 600,
              798: 600, 799: 880, 800: 350, 801: 509, 197: 100, 804: 10, 805: 30, 806: 60, 807: 200, 824: 10, 827: 990,
              830: 600, 834: 1880, 835: 10000, 843: 100, 844: 100, 845: 100, 846: 100, 862: 600, 863: 20, 865: 50000,
              866: 50000, 867: 100, 868: 100, 869: 10000, 870: 10000, 871: 50000, 872: 50000, 874: 600, 875: 100,
              876: 500, 877: 600, 919: 60, 923: 20, 927: 20, 935: 600, 936: 600, 938: 100, 939: 660, 943: 600, 944: 600,
              949: 20, 954: 80, 959: 10, 960: 10, 961: 10, 962: 100, 963: 600, 966: 10, 967: 20, 969: 910, 970: 660,
              971: 10, 972: 10, 973: 100, 974: 600, 986: 600, 989: 20, 990: 600, 991: 300, 998: 600, 1005: 200000,
              1007: 20, 1008: 20, 1010: 50000, 1014: 600, 1015: 600, 1017: 690,
              0: 200000  # super gift with chinese gift name
              }

    data = []
    for key in client.scan_iter(match='g[ns]:*'):
        gift = key[3:]
        gid = client.get(key)

        gn = 0
        try:
            gn = int(gift)
        except:
            pass

        price = prices.get(gn, 600)  # ï¿¥6 for unknown gift

        data.append((gift, gid, price))
    pd.DataFrame(data).to_csv(path, header=['gift', 'gid', 'price'], sep='\t', index=False)


if __name__ == '__main__':
    # store_user()
    # gen_date(insert=True)
    # gen_hour()
    store_gift('gift_price.csv')
